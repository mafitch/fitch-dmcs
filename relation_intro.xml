<?xml version="1.0" encoding="UTF-8" ?>

<section xml:id="section-codes" >
<title>Example: Error Correcting Codes</title>

<subsection>
	<title>Illustrated</title>

<p>In order to transfer data, that data must first be encoded in some fashion. For example letters are coded as numbers (Unicode). Every code is designed starting with the data and then assigning a code for each piece.</p>

<p>Additionally a code can address errors in transmission. Any time data is transmitted there is the chance that noise is introduced changing some of the values. To ensure that the correct data can be read despite the introduction of noise, codes are constructed that can either detect error or correct some errors. To do this each piece of data is encoded with sufficient duplicate information so that limited noise cannot change one piece of data into another one. For these examples the data will be considered to be binary strings. Errors will be counted as the numbers of bits that change.</p>

<p><term>Distance</term> can be formally defined, but for these examples we will use the specific distance defined by the distance between two binary strings is the number of digits that are different. For example <m>d(001,011)=1</m> and <m>d(000,110)=2.</m> This is known as the <term>taxi cab</term> metric, because it it the distance in blocks that must be traveled by a taxi. Figure <xref ref="cubecode" /> is a diagram showing all 3 digit binary strings with lines connecting those that are distance 1.</p>

<figure xml:id="cubecode">
	<caption>3 digit binary strings with distance one</caption>
    <image width="50%" source="images/code_dist" />
</figure>

</subsection>

<subsection>
	<title>Practice</title>

	<p>The goal is to design a code such that we can be certain two binary strings are different.</p>

  <exercise>
    <webwork>
      <statement>
        <p>Use the taxi cab metric described above to find these distances.</p>
        <p>Between 00 and 01? <var name="'1'" width="5" /></p>
        <p>Between 00 and 10? <var name="'1'" width="5" /></p>
        <p>Between 00 and 11? <var name="'2'" width="5" /></p>
        <p>Between 01 and 10? <var name="'2'" width="5" /></p>
        <p>Between 01 and 11? <var name="'1'" width="5" /></p>
        <p>Between 10 and 11? <var name="'1'" width="5" /></p>
      </statement>
    </webwork>
  </exercise>

	<exercise><p>If a single bit of 00 or 11 were changed (0 to 1 or 1 to 0) could you be certain whether a 00 or 11 had been sent?</p></exercise>

  <exercise>
    <webwork>
      <statement>
        <p>Use the taxi cab metric described above to find these distances.</p>
        <p>Between 000 and 001? <var name="'1'" width="5" /></p>
        <p>Between 000 and 010? <var name="'1'" width="5" /></p>
        <p>Between 000 and 100? <var name="'1'" width="5" /></p>
      </statement>
    </webwork>
  </exercise>

  <exercise>
    <webwork>
      <statement>
        <p>What is the distance between 001 and 100? <var name ="'2'" width="5" /></p>
      </statement>
    </webwork>
  </exercise>

  <exercise>
    <webwork>
      <statement>
        <p>Use the taxi cab metric described above to find these distances.</p>
        <p>Between 111 and 110? <var name="'1'" width="5" /></p>
        <p>Between 111 and 101? <var name="'1'" width="5" /></p>
        <p>Between 111 and 011? <var name="'1'" width="5" /></p>
      </statement>
    </webwork>
  </exercise>

	<exercise><p>If a single bit of 000 or 111 were changed (0 to 1 or 1 to 0) could you be certain whether a 000 or 111 had been sent?</p></exercise>

	<exercise><p>For the sake of reading data, two strings are considered equivalent if we are sure that they represent the same initial data. If anything distance one away is considered equivalent, what are the other representations for 000 in the code above? What are the other representations of 111 in the code above?</p></exercise>

	<exercise><p>If two bits of 000 or 111 were changed (0 to 1 or 1 to 0) could you be certain whether a 000 or 111 had been sent?</p></exercise>

	<exercise><p>Build a code for the data 00, 01, 10, 11 that will correct one bit errors. What is the fewest number of bits that can be used for each piece of data providing single bit error correction?</p></exercise>
</subsection>

</section>